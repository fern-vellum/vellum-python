// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > graph > should be correct for a basic conditional node case 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2 >> TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for a basic merge between a node and an edge 1`] = `
"{
    TemplatingNode >> TemplatingNode3,
    TemplatingNode2,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic merge node and an additional edge 1`] = `
"(
    {
        TemplatingNode,
        TemplatingNode2,
    }
    >> MergeNode
    >> TemplatingNode3
)
"
`;

exports[`Workflow > graph > should be correct for a basic merge node case 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic merge node case of multiple nodes 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
    TemplatingNode3,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic multiple nodes case 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for a basic single edge case 1`] = `
"TemplatingNode >> TemplatingNode2
"
`;

exports[`Workflow > graph > should be correct for a basic single node case 1`] = `
"TemplatingNode
"
`;

exports[`Workflow > graph > should be correct for a longer branch 1`] = `
"TemplatingNode >> TemplatingNode2 >> TemplatingNode3
"
`;

exports[`Workflow > graph > should be correct for a nested conditional node within a set 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2
    >> {
        ConditionalNode2.Ports.branch_2
        >> {
            TemplatingNode3,
            TemplatingNode4,
        },
        TemplatingNode2,
    },
}
"
`;

exports[`Workflow > graph > should be correct for a node to a set 1`] = `
"TemplatingNode >> {
    TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for a node to a set to a node 1`] = `
"(
    TemplatingNode
    >> {
        TemplatingNode2,
        TemplatingNode3,
    }
    >> TemplatingNode4
)
"
`;

exports[`Workflow > graph > should be correct for a single port pointing to a set 1`] = `
"ConditionalNode.Ports.branch_1 >> {
    TemplatingNode,
    TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for port within set to a set 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2
    >> {
        TemplatingNode2,
        TemplatingNode3,
    },
}
"
`;

exports[`Workflow > graph > should be correct for set of a branch and a node 1`] = `
"{
    TemplatingNode >> TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for set of a branch and a node to a node 1`] = `
"(
    {
        TemplatingNode >> TemplatingNode3 >> TemplatingNode4,
        TemplatingNode2,
    }
    >> MergeNode
    >> TemplatingNode5
)
"
`;

exports[`Workflow > graph > should be correct for three nodes 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for two branches from the same node 1`] = `
"TemplatingNode >> {
    MergeNode,
    TemplatingNode2 >> MergeNode,
}
"
`;

exports[`Workflow > graph > should be correct for two branches merging from sets 1`] = `
"{
    ConditionalNode.Ports.branch_1
    >> TemplatingNode
    >> {
        TemplatingNode3 >> TemplatingNode4,
        TemplatingNode5,
    },
    ConditionalNode.Ports.branch_2 >> TemplatingNode2 >> TemplatingNode3,
}
"
`;
