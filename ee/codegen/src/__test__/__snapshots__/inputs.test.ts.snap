// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Inputs > write > should convert input variable names into valid python attributes 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    my_input_1: str
    my_input_1: float
"
`;

exports[`Inputs > write > should generate correct code for complex input variables 1`] = `
"from vellum.workflows.inputs import BaseInputs
from typing import List
from vellum import ChatMessage, SearchResult


class Inputs(BaseInputs):
    query_1: str
    max_runtime_1: float
    previous_chat_history_1: List[ChatMessage]
    prior_results_1: List[SearchResult]
"
`;

exports[`Inputs > write > should generate correct code when Inputs has a custom name 1`] = `
"from vellum.workflows.inputs import BaseInputs


class CustomInputs(BaseInputs):
    input1_1: str
"
`;

exports[`Inputs > write > should generate correct code when Inputs has no variables 1`] = `""`;

exports[`Inputs > write > should generate correct code when Inputs has variables 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    input1_1: str
    input2_1: float
"
`;

exports[`Inputs > write > should generate correct code when Inputs has variables with duplicate keys 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    key_1_1: str
    key_1_2: str
"
`;

exports[`Inputs > write > should generate correct code when Inputs has variables with empty keys 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    var_1: str
    var_2: str
"
`;

exports[`Inputs > write > should generate correct code when default is a 'ARRAY' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from typing import List
from vellum import VellumValue


class Inputs(BaseInputs):
    array_input_1: List[VellumValue] = ["Example String", 123]
"
`;

exports[`Inputs > write > should generate correct code when default is a 'AUDIO' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from vellum import VellumAudio


class Inputs(BaseInputs):
    audio_input_1: VellumAudio
"
`;

exports[`Inputs > write > should generate correct code when default is a 'CHAT_HISTORY' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from typing import List
from vellum import ChatMessage


class Inputs(BaseInputs):
    chat_history_input_1: List[ChatMessage] = [
        ChatMessageRequest(role="USER", text="foo bar")
    ]
"
`;

exports[`Inputs > write > should generate correct code when default is a 'ERROR' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from vellum import VellumError


class Inputs(BaseInputs):
    error_input_1: VellumError = VellumError(
        message="Some 500 error", code="INTERNAL_SERVER_ERROR"
    )
"
`;

exports[`Inputs > write > should generate correct code when default is a 'FUNCTION_CALL' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from vellum import FunctionCall


class Inputs(BaseInputs):
    function_call_input_1: FunctionCall = FunctionCall(
        arguments={"arg1": "Hello World"}, name="function_call"
    )
"
`;

exports[`Inputs > write > should generate correct code when default is a 'IMAGE' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from vellum import VellumImage


class Inputs(BaseInputs):
    image_input_1: VellumImage
"
`;

exports[`Inputs > write > should generate correct code when default is a 'JSON' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from typing import Any


class Inputs(BaseInputs):
    json_input_1: Any = {"key": "value"}
"
`;

exports[`Inputs > write > should generate correct code when default is a 'NUMBER' 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    number_input_1: float = 123
"
`;

exports[`Inputs > write > should generate correct code when default is a 'SEARCH_RESULTS' 1`] = `
"from vellum.workflows.inputs import BaseInputs
from typing import List
from vellum import SearchResult, Document


class Inputs(BaseInputs):
    search_results_input_1: List[SearchResult] = [
        SearchResult(
            text="Hello, World!",
            score=1,
            keywords=["foo", "bar"],
            document=Document(id="", label="Example Document"),
        )
    ]
"
`;

exports[`Inputs > write > should generate correct code when default is a 'STRING' 1`] = `
"from vellum.workflows.inputs import BaseInputs


class Inputs(BaseInputs):
    string_input_1: str = "Example String"
"
`;
