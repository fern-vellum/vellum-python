// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > write > graph > should be correct for a basic conditional node case 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.conditional_node import ConditionalNode


class TestWorkflow(BaseWorkflow):
    graph = {
        ConditionalNode.Ports.branch_1 >> TemplatingNode,
        ConditionalNode.Ports.branch_2 >> TemplatingNode2,
    }
"
`;

exports[`Workflow > write > graph > should be correct for a basic merge node and an additional edge 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.merge_node import MergeNode
from .nodes.templating_node_3 import TemplatingNode3


class TestWorkflow(BaseWorkflow):
    graph = {TemplatingNode, TemplatingNode2} >> MergeNode >> TemplatingNode3
"
`;

exports[`Workflow > write > graph > should be correct for a basic merge node case 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.merge_node import MergeNode


class TestWorkflow(BaseWorkflow):
    graph = {TemplatingNode, TemplatingNode2} >> MergeNode
"
`;

exports[`Workflow > write > graph > should be correct for a basic multiple nodes case 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2


class TestWorkflow(BaseWorkflow):
    graph = {TemplatingNode, TemplatingNode2}
"
`;

exports[`Workflow > write > graph > should be correct for a basic single edge case 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2


class TestWorkflow(BaseWorkflow):
    graph = TemplatingNode >> TemplatingNode2
"
`;

exports[`Workflow > write > graph > should be correct for a basic single node case 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState
from .nodes.search_node import SearchNode
from .nodes.final_output import FinalOutput


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    graph = SearchNode

    class Outputs(BaseWorkflow.Outputs):
        query = FinalOutput.Outputs.value
"
`;

exports[`Workflow > write > graph > should be correct for a longer branch 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.templating_node_3 import TemplatingNode3


class TestWorkflow(BaseWorkflow):
    graph = TemplatingNode >> TemplatingNode2 >> TemplatingNode3
"
`;

exports[`Workflow > write > graph > should be correct for a node to a set 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.templating_node_3 import TemplatingNode3
from .nodes.templating_node import TemplatingNode


class TestWorkflow(BaseWorkflow):
    graph = TemplatingNode >> {TemplatingNode2, TemplatingNode3}
"
`;

exports[`Workflow > write > graph > should be correct for set of a branch and a node 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_2 import TemplatingNode2
from .nodes.templating_node_3 import TemplatingNode3


class TestWorkflow(BaseWorkflow):
    graph = {TemplatingNode >> TemplatingNode2, TemplatingNode3}
"
`;

exports[`Workflow > write > should generate correct code when there are input variables 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;

exports[`Workflow > write > should generate correct code when there are no input variables 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;

exports[`Workflow > write > should generate correct code with Search Results as an output variable 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState
from .nodes.final_output import FinalOutput


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        query = FinalOutput.Outputs.value
"
`;

exports[`Workflow > write > should handle edges pointing to non-existent nodes 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState
from .nodes.search_node import SearchNode


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    graph = SearchNode
"
`;
