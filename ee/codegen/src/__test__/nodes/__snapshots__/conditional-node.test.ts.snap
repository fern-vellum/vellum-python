// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ConditionalNode > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from ...nodes.conditional_node import ConditionalNode
from uuid import UUID
from vellum_ee.workflows.display.nodes.vellum.conditional_node import RuleIdMap
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id=UUID("fa50fb0c-8d62-40e3-bd88-080b52efd4b2"),
            lhs=RuleIdMap(
                id=UUID("ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc"), lhs=None, rhs=None
            ),
            rhs=None,
        )
    ]
    condition_ids = {
        0: UUID("8d0d8b56-6c17-4684-9f16-45dd6ce23060"),
        1: UUID("ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60"),
    }
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`ConditionalNode > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port
from ..inputs import Inputs


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        branch_1 = Port.on_if(Inputs.field.equals("testtest"))
        branch_2 = Port.on_else()
"
`;
