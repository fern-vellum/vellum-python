// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TemplatingNode > basic > getNodeDefinition 1`] = `
{
  "bases": [
    {
      "module": [
        "vellum",
        "workflows",
        "nodes",
        "core",
      ],
      "name": "TemplatingNode",
    },
  ],
  "module": [
    "code",
    "nodes",
    "templating_node",
  ],
  "name": "TemplatingNode",
}
`;

exports[`TemplatingNode > basic > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from ...nodes.templating_node import TemplatingNode
from uuid import UUID
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("7e09927b-6d6f-4829-92c9-54e66bdcaf80")
    target_handle_id = UUID("3feb7e71-ec63-4d58-82ba-c3df829a2948")
    template_input_id = UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")
    node_input_ids_by_name = {"text": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("dd8397b1-5a41-4fa0-8c24-e5dffee4fb98")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`TemplatingNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, world!"""
    inputs = {}
"
`;

exports[`TemplatingNode > reject on error enabled > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import (
    BaseTemplatingNodeDisplay,
    BaseTryNodeDisplay,
)
from ...nodes.templating_node import TemplatingNode
from uuid import UUID
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


@BaseTryNodeDisplay.wrap(error_output_id=UUID("e7a1fbea-f5a7-4b31-a9ff-0d26c3de021f"))
class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("7e09927b-6d6f-4829-92c9-54e66bdcaf80")
    target_handle_id = UUID("3feb7e71-ec63-4d58-82ba-c3df829a2948")
    template_input_id = UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")
    node_input_ids_by_name = {"text": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("dd8397b1-5a41-4fa0-8c24-e5dffee4fb98")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`TemplatingNode > reject on error enabled > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState
from vellum.workflows.nodes.core import TryNode


@TryNode.wrap()
class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, world!"""
    inputs = {}
"
`;
